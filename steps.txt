### Get Started
-   Created Next project with Shadcn UI (npx create-next-app@13.4.12 promaster-lms --typescript --tailwind --eslint)
-   Run Shadcn CLI (npx shadcn-ui@latest init)
-   Install Next.nav on VScode.
-   Create folder structure with route groups

### Clerk Authentication
-   Create and account with Clerk and Create new project
-   Add .env file to root of the project
-   Install clerk to the project (npm install @clerk/nextjs)
-   Wrap the main layout with ClerkProvider from '@clerk/nextjs'
-   Create the middlewate.ts to protect the dashboard
-   Create the Signin and Signup pages and add URLs in .env file
-   Add Clerk userButton to the home pages
-   Change custom url for routes and change middleware
-   Check the Signin or Signup working

### Layout the dashboard UI
-   Create dashboard layout
-   Create the sidebar within the (dashboard) file structure
-   Create the constants file to store all constants details
-   Create the Navbar component
-   Create the mobile sidebar component
-   Create NavbarRoutes in the global components folder for reuse later
-   Create the route for Teacher mode
-   Create New course page (/teacher/create)
-   Add Form, Input from Shadcn
-   Install axios
-   Design the form component for create course page and add the toast alert by installing it (react-hot-toast)
-   Create the toaster provider inside the component folder and import and return the Toaster from react-hot-toast
-   import ToasterProvider (from component folder) into the main layout

### Prisma & DB Setup 
-   Install Prisma (npm i -D prisma)
-   installing the Prisma into our project (npz prisma init)
-   Create a database in Planetscale
-   Copy and Paste .env and prisma.schema
-   Create db.ts file into the lib folder
-   Install prisma client (npm i @prisma/client)
-   Create models for Course, Attachment and Category in prisma.schema
-   Generate prisma everytime you play around with prisma (npx prisma generate) - Locally
-   Push the generated schema to database (npx prisma db push) - to Planetscale

### Course Creation API
-   Create app/api/courses/route.ts
-   Create the POST route to 'Create Course'
-   Test the application is running correctly
-   Check the created tables, run prisma studio (npx prisma studio)
-   Create the individual course page by using dynamic routes

### Course Edit Page UI
-   Fetch the course data
-   Create a icon-badge component varient as same like Shadcn component with the standard way

### Course Title Form
-   Create _component folder into the [courseId]
-   Create the TitleForm component
-   Create api for PATCH request. (course/[courseId]/route.ts)

### Course Description Form
-   Add textarea from shadcn
-   Copy the title-form.tsx page and modified as for the description (description-form.tsx)

### UploadThing & Image Form
-   Create an account on UploadThing and 'Create a new app'
-   Install some packages according to the UploadThing docs (https://docs.uploadthing.com/getting-started/appdir)
    (uploadthing, @uploadthing/react, react-dropzone)
-   Add .env variable
-   Create app/api/uploadthing/core.ts copy and paste the code from the docs
-   Modify the code as per our requirements
-   Create route.ts inside the uploadthing folder
-   Create uploadthing component in lib folder
-   Create file-upload component in the global components folder
-   Copy the description-form.tsx and paste it as image-form.tsx and make some changes
-   Import image-form into page.tsx
-   Update tailwind.config.js file for uploadthing
-   Add the host name into the next.config.js, Getting an error while fetching the image from uploadthing
-   Updated the middleware.ts to fix the auth error
Related files: middleware.ts, next.config.js, tailwind.config.js, [courseId]/page.tsx, image-form.tsx, api/uploadthing/core.ts & /route.ts, components/file-upload.tsx, lib/uploadthing.ts

### Course Category Form
-   To use the 'Combobox' from Shadcn, have to add Command and Popover components from Shadcn
-   Copy and Create new combobox component in components/ui and Modify bit
-   Fetch the Categories data from the db in teacher/../[courseId]/page.tsx
-   Create a script file (script/seed.ts) to create all categories - bcz there is no any way to create the categories through the form([courseId]/page.tsx)
-   Run the script file to seed the data to database (`node script/seed.ts)
-   Copy the description-form and paste is as category-form into the _component folder and modify some changes
-   Import category-form into page.tsx
-   Use Combobox component into the category-form

### Course Price Form
-   Layout the structure for 'course chapters' and 'course price'
-   Copy the description-form and paste is as price-form into the _component folder  and modify some changes
-   Create lib/format.ts file to Change the price format with $ sign

### Course Attachment Form
-   Layout the structure for 'course Attachment'
-   Copy the image-form and paste is as attachment-form into the _component folder
-   Includes attachments to the courses which we fetched from the db in page.tsx
-   modify some changes on attachment-form
-   Create a new api route for attachments  ([courseId]/attachments)
-   Show the files which will be uploaded with delete button
-   Create a new api route for attachment ID to delete

### Prisma Schema Finalization
-   Create the model for Chapter
-   Create the model for MuxData
-   Create the model for UserProgress
-   Make all relations properly
-   Create the model for Purchase
-   Create the model for StripeCustomer
-   `npx prisma generate` to add all of those new models inside of our db util
-   `npx prisma db push` to push the changes to Planetscale database

### Chapter Creation API
-   Copy the description-form and paste is as chapters-form into the _component folder  and modify some changes
-   Includes chapters as well to the courses which we fetched from the db in page.tsx
-   Update the requiredFields (5/6)
-   Added some additional changes in chapter-form
-   Create a new api route for chapters (../[courseId]/chapters/route.ts)

### Chapter Reorder Functionality
-   Create chapters-list component into _component folder
-   Install the Drag and Drop package (npm i @hello-pangea/dnd)
-   Add badge from shadcn
-   Create onReorder and onEdit function to update the bulk data to the db (chapters-form.tsx)
-   Create a new api route for reorder (../[courseId]/chapters/reorder/route.ts)
-   Add the loading state to indicate reordering the chapters list (chapters-form.tsx)

### Chapter Edit Page UI & Title
-   Create the ChapterIdPage (../[courseId]/chapters/[chapterId]/page.tsx)
-   Create the _components folder inside the [chapterId] 
-   Copy the title-form.tsx from [courseId]/_components and paste it here as chapter-title-form.tsx
-   Modify the chapter-title-form.tsx as we needed
-   Create a new api route for chapterId (../chapters/[chapterId]/route.ts)

### Chapter Description Form
-   Install React-Quill (`npm i react-quill`) : Rich Text Editor
-   Create a new global component called editor.tsx
-   Copy the editor.tsx and paste it as preview.tsx in the global components folder to preview the description text
-   Do some changes on the preview.tsx component for preview the text
-   Copy the description-form.tsx from [courseId]/_components and paste it here as chapter-description-form.tsx
-   Modify the chapter-description-form.tsx as we needed
-   The chapter description is working fine
-   Get the preview using the preview component in page.tsx
-   Add some css to change the style of Preview component text (global.css)

### Chapter Access Form - FREE/PAYMENT
-   Copy the chapter-description-form.tsx and paste it as chapter-access-form.tsx on ../[chapterId]/_components
-   Modify the chapter-access-form.tsx as we needed
-   Add checkbox from shadcn
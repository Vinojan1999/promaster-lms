### Get Started
-   Created Next project with Shadcn UI (npx create-next-app@13.4.12 promaster-lms --typescript --tailwind --eslint)
-   Run Shadcn CLI (npx shadcn-ui@latest init)
-   Install Next.nav on VScode.
-   Create folder structure with route groups

### Clerk Authentication
-   Create and account with Clerk and Create new project
-   Add .env file to root of the project
-   Install clerk to the project (npm install @clerk/nextjs)
-   Wrap the main layout with ClerkProvider from '@clerk/nextjs'
-   Create the middlewate.ts to protect the dashboard
-   Create the Signin and Signup pages and add URLs in .env file
-   Add Clerk userButton to the home pages
-   Change custom url for routes and change middleware
-   Check the Signin or Signup working

### Layout the dashboard UI
-   Create dashboard layout
-   Create the sidebar within the (dashboard) file structure
-   Create the constants file to store all constants details
-   Create the Navbar component
-   Create the mobile sidebar component
-   Create NavbarRoutes in the global components folder for reuse later
-   Create the route for Teacher mode

### Course Creation UI
-   Add Form, Input from Shadcn (it's also have include zod and hooks etc...)
-   Create New course page (/teacher/create)
-   Install axios
-   Design the form component for create course page and add the toast alert by installing it (react-hot-toast)
-   Create the toaster provider inside the component folder and import and return the Toaster from react-hot-toast
-   import ToasterProvider (from component folder) into the main layout

### Prisma & DB Setup 
-   Install Prisma (npm i -D prisma)
-   Initiate the Prisma into our project (npx prisma init)
-   Create a database in Planetscale
-   Copy and Paste .env and prisma.schema
-   Install prisma client (npm i @prisma/client)
-   Create db.ts file into the lib folder
-   Create models for Course, Attachment and Category in prisma.schema
-   Generate prisma everytime you play around with prisma (npx prisma generate) - Locally
-   Push the generated schema to database (npx prisma db push) - to Planetscale

### Course Creation API
-   Create app/api/courses/route.ts
-   Create the POST route to 'Create Course'
-   Test the application is running correctly
-   Check the created tables, run prisma studio (npx prisma studio)
-   Create the individual course page by using dynamic routes

### Course Edit Page UI
-   Fetch the course data
-   Create a icon-badge component varient as same like Shadcn component with the standard way

### Course Title Form
-   Create _component folder into the [courseId]
-   Create the TitleForm component
-   Create api for PATCH request. (course/[courseId]/route.ts)

### Course Description Form
-   Add textarea from shadcn
-   Copy the title-form.tsx page and modified as for the description (description-form.tsx)

### UploadThing & Image Form
-   Create an account on UploadThing and 'Create a new app'
-   Install some packages according to the UploadThing docs (https://docs.uploadthing.com/getting-started/appdir)
    (uploadthing, @uploadthing/react, react-dropzone)
-   Add .env variable
-   Create app/api/uploadthing/core.ts copy and paste the code from the docs
-   Modify the code as per our requirements
-   Create route.ts inside the uploadthing folder
-   Create uploadthing component in lib folder
-   Create file-upload component in the global components folder
-   Copy the description-form.tsx and paste it as image-form.tsx and make some changes
-   Import image-form into page.tsx
-   Update tailwind.config.js file for uploadthing
-   Add the host name into the next.config.js, Getting an error while fetching the image from uploadthing
-   Updated the middleware.ts to fix the auth error
Related files: middleware.ts, next.config.js, tailwind.config.js, [courseId]/page.tsx, image-form.tsx, api/uploadthing/core.ts & /route.ts, components/file-upload.tsx, lib/uploadthing.ts

### Course Category Form
-   To use the 'Combobox' from Shadcn, have to add Command and Popover components from Shadcn
-   Copy and Create new combobox component in components/ui and Modify bit
-   Fetch the Categories data from the db in teacher/../[courseId]/page.tsx
-   Create a script file (script/seed.ts) to create all categories - bcz there is no any way to create the categories through the form([courseId]/page.tsx)
-   Run the script file to seed the data to database (`node script/seed.ts)
-   Copy the description-form and paste is as category-form into the _component folder and modify some changes
-   Import category-form into page.tsx
-   Use Combobox component into the category-form

### Course Price Form
-   Layout the structure for 'course chapters' and 'course price'
-   Copy the description-form and paste is as price-form into the _component folder  and modify some changes
-   Create lib/format.ts file to Change the price format with $ sign

### Course Attachment Form
-   Layout the structure for 'course Attachment'
-   Copy the image-form and paste is as attachment-form into the _component folder
-   Includes attachments to the courses which we fetched from the db in page.tsx
-   modify some changes on attachment-form
-   Create a new api route for attachments  ([courseId]/attachments)
-   Show the files which will be uploaded with delete button
-   Create a new api route for attachment ID to delete

### Prisma Schema Finalization
-   Create the model for Chapter
-   Create the model for MuxData
-   Create the model for UserProgress
-   Make all relations properly
-   Create the model for Purchase
-   Create the model for StripeCustomer
-   `npx prisma generate` to add all of those new models inside of our db util
-   `npx prisma db push` to push the changes to Planetscale database

### Chapter Creation API
-   Copy the description-form and paste is as chapters-form into the _component folder  and modify some changes
-   Includes chapters as well to the courses which we fetched from the db in page.tsx
-   Update the requiredFields (5/6)
-   Added some additional changes in chapter-form
-   Create a new api route for chapters (../[courseId]/chapters/route.ts)

### Chapter Reorder Functionality
-   Create chapters-list component into _component folder
-   Install the Drag and Drop package (npm i @hello-pangea/dnd)
-   Add badge from shadcn
-   Create onReorder and onEdit function to update the bulk data to the db (chapters-form.tsx)
-   Create a new api route for reorder (../[courseId]/chapters/reorder/route.ts)
-   Add the loading state to indicate reordering the chapters list (chapters-form.tsx)

### Chapter Edit Page UI & Title
-   Create the ChapterIdPage (../[courseId]/chapters/[chapterId]/page.tsx)
-   Create the _components folder inside the [chapterId] 
-   Copy the title-form.tsx from [courseId]/_components and paste it here as chapter-title-form.tsx
-   Modify the chapter-title-form.tsx as we needed
-   Create a new api route for chapterId (../chapters/[chapterId]/route.ts)

### Chapter Description Form
-   Install React-Quill (`npm i react-quill`) : Rich Text Editor
-   Create a new global component called editor.tsx
-   Copy the editor.tsx and paste it as preview.tsx in the global components folder to preview the description text
-   Do some changes on the preview.tsx component for preview the text
-   Copy the description-form.tsx from [courseId]/_components and paste it here as chapter-description-form.tsx
-   Modify the chapter-description-form.tsx as we needed
-   The chapter description is working fine
-   Get the preview using the preview component in page.tsx
-   Add some css to change the style of Preview component text (global.css)

### Chapter Access Form - FREE/PAYMENT
-   Copy the chapter-description-form.tsx and paste it as chapter-access-form.tsx on ../[chapterId]/_components
-   Modify the chapter-access-form.tsx as we needed
-   Add checkbox from shadcn

### Mux Setup & Chapter Video Form
-   Copy the image-form.tsx from [courseId]/_components and paste it here as chapter-video-form.tsx
-   Modify the chapter-video-form.tsx as we needed
-   Can able to upload the video now
-   Create an account on mux.com (GitHub)
-   Go to settings > Access tokens > Generate new token > SELECT 'Mux Video & Write' > Generate token > env variables
-   Copy the variables and paste them into .env file
-   Install Mux (`npm i @mux/mux-node` && `npm i @mux/mux-player-react`)
-   Update the PATCH api route for Handling Video Upload 
-   Text to upload a video and check it is available on Mux Video Assets
-   Display the video using Mux Player

### Chapter Publish Action
-   Create a banner to identify the course or chapter is published (Global component)
-   Wrap the entire div in ../[chapterId]/page.tsx by empty react fragment and calling the banner into the page
-   Create the chapter-actions.tsx component into the _components folder to add the buttons to publish && delete the chapters in chapter page
-   Add alert-dialog from shadcn
-   Create a new folder called models inside the global components folder, and create confirm-model.tsx
-   Wrap the delete button by the ConfirmModel component
-   Write a DELETE function with Unpublish entire course facility for the chapter (chapter-actions.tsx)
-   Write a DELETE route to delete chapter
-   Check whether DELETE is working. 
-   Write a PUBLISH / UNPUBLISH function for the chapter (chapter-actions.tsx)
-   Create a new api route for publish chapter (../chapters/[chapterId]/publish/route.ts)
-   Create a new api route for unpublish chapter (../chapters/[chapterId]/unpublish/route.ts)

### Course Publish Action
-   Wrap the entire div in ../[courseId]/page.tsx by empty react fragment
-   Import and use the banner component here
-   Copy the chapter-actions.tsx and paste it as actions.tsx to ../[courseId]/_components and modify a bit
-   Write a DELETE route in ../[courseId]/route.ts to delete the entire course
-   Create a new api route for publish chapter (../[courseId]/publish/route.ts)
-   Create a new api route for unpublish chapter (../[courseId]/unpublish/route.ts)
-   Install Zustand and (`npm i zustand` && `npm i react-confetti`) to throw the nice confetti when publish the course
    (Zustand is a simple and powerful state management solution for React. It allows you to manage state in a simple and intuitive way. It mainly uses hooks as a means of communicating back and forth with the state.)
-   Create a hook for confetti (hooks/use-confetti-store.ts)
-   Create a confetti provider component (components/providers/confetti-provider.tsx)
-   Add ConfettiProvider component into the app/layout.tsx
-   Use the confetti on course actions component (../[courseId]/_components/actions.tsx)

### Test Next Video Player
-   Install Next Video and Initiate it (`npm i next-video` && `npx next-video init`)
-   Add Video URL and test the player

### Courses Data Table
-   Add table from shadcn
-   Install React table dependancy (`npm install @tanstack/react-table`)
-   Setup the structure according to the shadcn data table doc
    > Create new component for columns.tsx (../courses/_components/columns.tsx) and paste the basic code
    > Create data-table.tsx component at same folder and paste the basic code
    > Setup the /courses/page.tsx to render the table
-   Modify the data table as we needed.
-   Add pagination to the data table using shadcn docs (1)
-   Add sorting to the data table using shadcn docs (2)
-   Add filtering to the data table using shadcn docs (3)
-   Add dropdown-menu from shadcn
-   Add create new course button

### Categories Query
-   Install Query String and React Icons (`npm i query-string` && `npm i react-icons`)
-   Modify the search page (../search/page.tsx)
-   Create new component for categories (../search/_components/categories.tsx)
-   Create new component for category-list (../search/_components/category-list.tsx) to list all categories

### Search Query
-   Create the hooks as use-debounce.ts 
-   Create a new global component for search-input.tsx and add it to the NavbarRoutes component
-   Push the search query to the route url
-   Add the search input to mobile responsive as well

### Course Grid & Card UI
-   Create a new action function for get user progress (`/actions/get-progress.ts`)
-   Create a new action function for get courses to load the courses for the search page (`/actions/get-courses.ts`)
-   Update the prisma schema for fetching the courses propperly in get-courses.ts
    > Update generator client
    > Update the Course schema with @@fulltext([title])
    > `npx prisma generate` && `npx prisma db push`
    Now our courses searchable by title from the db
-   Fetch the courses in searchPage using getCourses function by passing the userId and searchParams
-   Create new global component for courses-list
-   Create new global component for course-card

### Course & Chapters Layout
-   Create a new organizational group folder called '(course)'
-   Create courseId page inside of this folder (app/(course)/courses/[courseId]/page.tsx)
-   Create a new layout for CourseIdPage and fetch the course and progress on it
-   Create a new component for CourseSidebar (../courses/[courseId]/_components)
    > Update the prisma.schema according to the purchase needs into the CourseSidebar component
    > `npx prisma generate` && `npx prisma db push`
-   Create a new component for CourseSidebarItem
-   Create a new component for CourseNavbar
-   Create a new component for CourseMobileSidebar

### Chapter HLS Video Player
-   Create chapterId page inside of this folder (../[courseId]/chapters/[chapterId]/page.tsx)
-   Modify the courseIdPage to immediately redirect to the first chapter when we click the course
-   Create a new action function for get chapters (`/actions/get-chapters.ts`)
-   Modify the chapterId page for the video player
-   Create a new component for VideoPlayer (../chapters/[chapterId]/_components)

### Course Purchase UI
-   Create a new component for CourseEnrollButton (../chapters/[chapterId]/_components)
-   Add separator from shadcn
-   Add chapter description and attachments to the chapterId page

### Stripe Integration
-   Go to the `stripe.com` and login
-   Create 'New account' for this project (`promaster-lms`)
-   Click 'API keys for developers'
-   Copy the Secret key and paste it into .env (STRIPE_API_KEY)
-   Install Stripe (`npm i stripe`)
-   Create lib/stripe.ts file for the Stripe Integration
-   Create a new api route for checkout (../courses/[courseId]/checkout/route.ts)
-   Add NEXT_PUBLIC_APP_URL variable in .env file for Stripe 
-   Setup the Stripe cli webhook
    (Test in a local environment > follow the instructions)
    Copy the webhook signing secret and paste it into .env file
    Create a new api webhook for stripe (api/webhook/route.ts)
-   write a button function to purchase the course in `(course)/.../[chapterId]/_components/course-enroll-button.tsx`
-   To test, make sure the stripe local cli is running (`stripe listen --forward-to localhost:3000/api/webhook`)

### Chapter Progress Functionality
-   Create a new global component for CourseProgress 
    And call it into course-sidebar.tsx component
-   Add progress from shadcn
-   Update the ui/progress component with progressVariants
-   Add the CourseProgress component to the CourseCard for searchPage
-   Add button function to trigger to completion of chapter in ChapterIdPage
-   Create a new component for CourseProgressButton (../chapters/[chapterId]/_components)
    Add 'success' varient to the Button component
-   Create a new api route for checkout (../chapters/[chapterId]/progress)
-   Also enable the VideoPlayer to complete the chapter if its reaches to the end
    Update the onEnded function on VideoPlayer component (../chapters/[chapterId]/_components)

### Student Dashboard
-   Change the DashboardPage path (../(routes) -> ../(routes)/(root)/page.tsx)
-   Create new action file for get dashboard courses (`/actions/get-dashboard-courses.ts`)
-   Get the courses in DashboardPage using the getDashboardCourses function
-   Create a new component for InfoCard (../(root)/_components)

### Teacher Analytics Dashboard
-   Create new action file for get analytics (`/actions/get-analytics.ts`)
-   Modify the AnalyticsPage (`../(routes)/teacher/analytics/page.tsx`)
-   Add card from shadcn
-   Create a new component for DataCard (../teacher/analytics/_components)
-   Install Recharts (`npm i recharts`)
-   Create a new component for Chart (../teacher/analytics/_components)

### Admin Protection
-   Create new lib file for teacher to protect page (`/lib/teacher.ts`)
-   Define the NEXT_PUBLIC_TEACHER_ID as a Teacher id in .env
-   Protect the Navbar button using isTeacher lib file
-   Protect the teacher routes (frontend) from other users
    Create a layout file for the teacher and call the isTeacher lib and redirect
-   Protect the teacher api routes (backend) from other users
    `api/uploadthing/core.ts` and `api/courses/route.ts`,
    Note: That's enoght to protect the `api/courses/route.ts` (the POST funtion), bcz for other routes, it's usually checked the courseOwner so other users can not use them without creating a course

### Deployment
-   Add a new script on package.json for the prisma (`"postinstall": "prisma generate"`)
-   Push to git from local environment (local git -> github repo)
-   Go to the vercel.com and create a new project
    Import the Git repository
    Add environment variable
    change these variables (
        NEXT_PUBLIC_APP_URL: as deployed url (add without back slash),
        STRIPE_WEBHOOK_SECRET: {
            go to the stripe dashboard > Developers > Webhooks > Add an endpoint > verify using the password
            paste the deployed_url/webhook_path as the Endpoint URL (`deployed_url/api/webhook)
            select events (checkout > checkout.session.completed) > finally "Add endpoint"
            Copy the 'Signing secret' and paste it as `STRIPE_WEBHOOK_SECRET` in vercel environment
        } 
    )
    Redeploy the application (without cache)

### Fix Deployment Errors
-   Modify ChaptersList component with the proper types
-   Merge the CategoryForm and Combobox components together to fix types issues



/////////////////////////////////////////////////////////

Use hls.js library to handle video streaming


## Run the application from scratch
1.  Sync our prisma schema with database
2.  Run the seed script
3.  Run the application and create the course

npx prisma migrate dev --name init

NOTE: `npx prisma migrate reset`  -   Reset the entire database